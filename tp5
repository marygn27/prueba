#1) Escribir una clase llamada Rectángulo que contenga una base y una altura, y que contenga un método que devuelva el área
#del rectángulo.


"""class rectangulo:


def__init__(self, Base, Altura):
    self.Base=Base
    self.Altura=Altura

def Area(self)
    return self.Base*self.Altura

Rectangulo1=Rectangulo(10,10)
print(Rectangulo1.Area())"""

#2) Modelar una clase Mate que describa el funcionamiento de la conocida bebida tradicional argentina. La clase debe contener
#como miembros:
#- Un atributo para la cantidad de cebadas restantes hasta que se lava el mate (representada por un número).
#-Un atributo para el estado (lleno o vacío).
#- Un atributo n, que indica la cantidad máxima de cebadas.
#-Un método cebar, que llena el mate con agua. Si se intenta cebar con el mate lleno, se debe lanzar una
#excepción que imprima el mensaje ¡Cuidado! ¡Te quemaste!
#- Un método beber, que vacía el mate y le resta una cebada disponible. Si se intenta beber un mate vacío, se
#debe lanzar una excepción que imprima el mensaje: ¡El mate está vacío!
#- Es posible seguir cebando y bebiendo el mate aunque no haya cebadas disponibles. En ese caso la cantidad
#de cebadas restantes se mantendrá en 0, y cada vez que se intente beber se debe imprimir un mensaje de aviso:
#“Advertencia: el mate está lavado.” pero no se debe lanzar una excepción.

"""classMate:def__init__(self, CantidadMaxima=10, Estado=False):
    self.CantidadMaxima==CantidadMaxima
    self.CantidadRestante=CantidadMaxima

def Cebar(self):
    if self.Estado==True:
        print("Te quemaste")
    Else:
        self.Estado=True
    
def Beber(self):
    if self.Estado==False:
        print("El mate esta vacío")
    else:
        if self.CantidadRestante==0:
            print("Advertencia: el mate está lavado")
            self.Estado=false
        else:
            self.CantidadRetsante-=1
            self.Estado=False"""
    

"""Escriba una función redondear() que permita redondear un número
decimal de acuerdo al criterio: Si el número es mayor a 3.50, devolver el
entero siguiente (en este caso, 4), si no devolver el entero inmediatamente
anterior (3)."""

"""Coloque el módulo del ejercicio anterior dentro de un paquete. En un
módulo que esté fuera de ese paquete, cree una función de suma de
decimales que redondee el resultado haciendo uso de la función
redondear() del paquete recién creado.""",


"""def redondear(número):
    if número > 3.5:
        return int(número) + 1
    else:
        return int(número)"""
    
     mi_paquete/
├── __init__.py
└── redondeo.py

from .redondeo import redondear
from mi_paquete import redondeo

def suma_decimales(num1, num2):
    resultado = num1 + num2
    return redondeo.redondear(resultado)

#Usando el módulo datetime, escribe un programa que muestre la fecha
#y hora actuales del sistema.

import datetime
now = datetime.datetime.now()
print("Fecha y hora actual:", now.strftime("%Y-%m-%d %H:%M:%S"))

"""Escriba un programa que devuelva un número par al azar entre 2 y 10
(pista: para comprobar si se pueden generar todos los números, pruebe
ejecutar el programa dentro de un ciclo infinito)."""



import random

while True:
    num = random.randint(2, 10)
    if num % 2 == 0:
        print(num)
        break

import random

"""Bola mágica: La bola mágica (Magic 8 ball) es un popular juguete usado
para la adivinación o para buscar consejo. Su mecanismo es muy simple:
ante una pregunta del usuario, la bola responde con una de 8 posibles
respuestas:
- Es seguro que sí
- Las chances son buenas
- Puedes contar con ello
- Pregúntame de nuevo más tarde
- Concéntrate y pregunta de nuevo
- No veo con claridad, intenta de nuevo
- Mi respuesta es no
- Mis fuentes me dicen que no
Escriba una función en Python para simular la bola mágica."""

def bola_magica():
    respuestas = ["Es seguro que sí", "Las chances son buenas", "Puedes contar con ello",
                  "Pregúntame de nuevo más tarde", "Concéntrate y pregunta de nuevo",
                  "No veo con claridad, intenta de nuevo", "Mi respuesta es no",
                  "Mis fuentes me dicen que no"]
    return random.choice(respuestas)

respuesta = bola_magica()
print(respuesta)

#Encuentre el tiempo de ejecución de los programas de los ejercicios
#anteriores (pista: use el módulo time)

import time

start_time = time.time()
#  ejercicio 1
print("Tiempo de ejecución:", time.time() - start_time)

start_time = time.time()
# ejercicio 2
print("Tiempo de ejecución:", time.time() - start_time)

start_time = time.time()
#  ejercicio 3
print("Tiempo de ejecución:", time.time() - start_time)

start_time = time.time()
# ejercicio 4
# como el programa del ejercicio 4 tiene un ciclo infinito, 
#       es necesario detenerlo manualmente después de un tiempo.
print("Tiempo de ejecución:", time.time() - start_time)

start_time = time.time()
# ejercicio 5
print("Tiempo de ejecución:", time.time() - start_time)




    


